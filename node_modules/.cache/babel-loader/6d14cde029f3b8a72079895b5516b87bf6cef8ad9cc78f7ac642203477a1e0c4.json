{"ast":null,"code":"var _jsxFileName = \"/home/georg/kood/racetrack/src/front/pages/LapLineTrackerPage.js\",\n  _s = $RefreshSig$();\n// import React, {useEffect, useState} from \"react\";\n// import LapButtons from \"./components/Button/LapButtons\";\n//\n// function LapLineTracker({socket}) {\n//     const [cars, setCars] = useState([]); //List of cars\n//     const [hideButtons, setHideButtons] = useState(false)\n//     //once on startup\n//     useEffect(() => {\n//         socket.emit('request-init-cars');\n//     }, []);\n//\n//     useEffect(() => {\n//         //get initial list of cars\n//         socket.on('init-cars', (cars) => {\n//             setCars(cars);\n//         });\n//\n//         //Update cars data\n//         socket.on('update-car', (updatedCar) => {\n//             setCars((prevCars) =>\n//                 prevCars.map((car) =>\n//                     car.number === updatedCar.number\n//                         ? {...car, fastestLap: updatedCar.fastestLap, currentLap: updatedCar.currentLap}\n//                         : car\n//                 )\n//             );\n//         });\n//\n//         socket.on('last_call_message', (data) => {\n//             setHideButtons(data)\n//         })\n//\n//         return () => {\n//             socket.off('init-cars');\n//             socket.off('update-car');\n//             socket.off('last_call_message')\n//\n//         };\n//     }, [socket]);\n//\n//     //Button handler\n//     const handleLapCross = (carNumber) => {\n//         const timestamp = Date.now();\n//         setCars((prevCars) =>\n//             prevCars.map((car) =>\n//                 car.number === carNumber\n//                     ? {...car, currentLap: (car.currentLap || 0) + 1}\n//                     : car\n//             )\n//         );\n//         socket.emit('lap-cross', {carNumber, timestamp});\n//     };\n//\n//     return (\n//         <div>\n//             <h1>Lap Line Tracker</h1>\n//             {hideButtons && <div>Race over</div>}\n//             {!hideButtons && <>\n//                 {cars.length <= 0 ? (\n//                     <p>No cars available</p>\n//                 ) : (\n//                     <ul>\n//                         {cars.map((car) => (\n//                             <li key={car.number}>\n//                                 <div style={{display: 'flex', alignItems: 'center', marginBottom: '10px'}}>\n//                                     <span style={{marginRight: '10px'}}>Car #{car.number} ({car.name})</span>\n//                                     <LapButtons car={car}\n//                                                 onClick={() => handleLapCross(car.number)}\n//                                                 disabled={hideButtons}\n//                                     />\n//                                     <span style={{marginLeft: '10px'}}>\n//                       {`Lap# ${car.currentLap}`}\n//                     </span>\n//                                     <span style={{marginLeft: '10px'}}>\n//                       Fastest Lap: {car.fastestLap ? `${car.fastestLap} ms` : 'N/A'}\n//                     </span>\n//                                 </div>\n//                             </li>\n//                         ))}\n//                     </ul>\n//                 )}</>}\n//         </div>\n//     );\n//\n// }\n//\n// export default LapLineTracker;\n\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Row, Col, Card, Alert } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction LapLineTracker({\n  socket\n}) {\n  _s();\n  const [cars, setCars] = useState([]); // List of cars\n  const [hideButtons, setHideButtons] = useState(false);\n\n  // once on startup\n  useEffect(() => {\n    socket.emit(\"request-init-cars\");\n  }, []);\n  useEffect(() => {\n    // Get initial list of cars\n    socket.on(\"init-cars\", cars => {\n      setCars(cars);\n    });\n\n    // Update cars data\n    socket.on(\"update-car\", updatedCar => {\n      setCars(prevCars => prevCars.map(car => car.number === updatedCar.number ? {\n        ...car,\n        fastestLap: updatedCar.fastestLap,\n        currentLap: updatedCar.currentLap\n      } : car));\n    });\n    socket.on(\"last_call_message\", data => {\n      setHideButtons(data);\n    });\n    return () => {\n      socket.off(\"init-cars\");\n      socket.off(\"update-car\");\n      socket.off(\"last_call_message\");\n    };\n  }, [socket]);\n\n  // Button handler\n  const handleLapCross = carNumber => {\n    const timestamp = Date.now();\n    setCars(prevCars => prevCars.map(car => car.number === carNumber ? {\n      ...car,\n      currentLap: (car.currentLap || 0) + 1\n    } : car));\n    socket.emit(\"lap-cross\", {\n      carNumber,\n      timestamp\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center mb-4\",\n      children: \"Lap Line Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), hideButtons && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      children: \"Race over\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 29\n    }, this), !hideButtons && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: cars.length <= 0 ? /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"warning\",\n        children: \"No cars available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(Row, {\n        className: \"g-4\",\n        children: cars.map(car => /*#__PURE__*/_jsxDEV(Col, {\n          xs: 6,\n          lg: 3,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: \"shadow h-100\",\n            onClick: () => handleLapCross(car.number),\n            style: {\n              cursor: \"pointer\",\n              backgroundColor: \"#32CD32\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                style: {\n                  fontSize: \"18px\"\n                },\n                children: [\"Car: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    fontSize: \"30px\"\n                  },\n                  children: [\"#\", car.number]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 89\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Lap:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 49\n                }, this), \" \", car.currentLap || 0, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 93\n                }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Fastest Lap:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 49\n                }, this), \" \", car.fastestLap ? `${car.fastestLap} ms` : \"N/A\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 37\n          }, this)\n        }, car.number, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 25\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 9\n  }, this);\n}\n_s(LapLineTracker, \"+2DpGJMrKrxQyOWNSfYEIpOw8Bo=\");\n_c = LapLineTracker;\nexport default LapLineTracker;\nvar _c;\n$RefreshReg$(_c, \"LapLineTracker\");","map":{"version":3,"names":["React","useEffect","useState","Container","Row","Col","Card","Alert","jsxDEV","_jsxDEV","Fragment","_Fragment","LapLineTracker","socket","_s","cars","setCars","hideButtons","setHideButtons","emit","on","updatedCar","prevCars","map","car","number","fastestLap","currentLap","data","off","handleLapCross","carNumber","timestamp","Date","now","className","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","length","xs","lg","onClick","style","cursor","backgroundColor","Body","Title","fontSize","Text","_c","$RefreshReg$"],"sources":["/home/georg/kood/racetrack/src/front/pages/LapLineTrackerPage.js"],"sourcesContent":["// import React, {useEffect, useState} from \"react\";\n// import LapButtons from \"./components/Button/LapButtons\";\n//\n// function LapLineTracker({socket}) {\n//     const [cars, setCars] = useState([]); //List of cars\n//     const [hideButtons, setHideButtons] = useState(false)\n//     //once on startup\n//     useEffect(() => {\n//         socket.emit('request-init-cars');\n//     }, []);\n//\n//     useEffect(() => {\n//         //get initial list of cars\n//         socket.on('init-cars', (cars) => {\n//             setCars(cars);\n//         });\n//\n//         //Update cars data\n//         socket.on('update-car', (updatedCar) => {\n//             setCars((prevCars) =>\n//                 prevCars.map((car) =>\n//                     car.number === updatedCar.number\n//                         ? {...car, fastestLap: updatedCar.fastestLap, currentLap: updatedCar.currentLap}\n//                         : car\n//                 )\n//             );\n//         });\n//\n//         socket.on('last_call_message', (data) => {\n//             setHideButtons(data)\n//         })\n//\n//         return () => {\n//             socket.off('init-cars');\n//             socket.off('update-car');\n//             socket.off('last_call_message')\n//\n//         };\n//     }, [socket]);\n//\n//     //Button handler\n//     const handleLapCross = (carNumber) => {\n//         const timestamp = Date.now();\n//         setCars((prevCars) =>\n//             prevCars.map((car) =>\n//                 car.number === carNumber\n//                     ? {...car, currentLap: (car.currentLap || 0) + 1}\n//                     : car\n//             )\n//         );\n//         socket.emit('lap-cross', {carNumber, timestamp});\n//     };\n//\n//     return (\n//         <div>\n//             <h1>Lap Line Tracker</h1>\n//             {hideButtons && <div>Race over</div>}\n//             {!hideButtons && <>\n//                 {cars.length <= 0 ? (\n//                     <p>No cars available</p>\n//                 ) : (\n//                     <ul>\n//                         {cars.map((car) => (\n//                             <li key={car.number}>\n//                                 <div style={{display: 'flex', alignItems: 'center', marginBottom: '10px'}}>\n//                                     <span style={{marginRight: '10px'}}>Car #{car.number} ({car.name})</span>\n//                                     <LapButtons car={car}\n//                                                 onClick={() => handleLapCross(car.number)}\n//                                                 disabled={hideButtons}\n//                                     />\n//                                     <span style={{marginLeft: '10px'}}>\n//                       {`Lap# ${car.currentLap}`}\n//                     </span>\n//                                     <span style={{marginLeft: '10px'}}>\n//                       Fastest Lap: {car.fastestLap ? `${car.fastestLap} ms` : 'N/A'}\n//                     </span>\n//                                 </div>\n//                             </li>\n//                         ))}\n//                     </ul>\n//                 )}</>}\n//         </div>\n//     );\n//\n// }\n//\n// export default LapLineTracker;\n\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Row, Col, Card, Alert } from \"react-bootstrap\";\n\nfunction LapLineTracker({ socket }) {\n    const [cars, setCars] = useState([]); // List of cars\n    const [hideButtons, setHideButtons] = useState(false);\n\n    // once on startup\n    useEffect(() => {\n        socket.emit(\"request-init-cars\");\n    }, []);\n\n    useEffect(() => {\n        // Get initial list of cars\n        socket.on(\"init-cars\", (cars) => {\n            setCars(cars);\n        });\n\n        // Update cars data\n        socket.on(\"update-car\", (updatedCar) => {\n            setCars((prevCars) =>\n                prevCars.map((car) =>\n                    car.number === updatedCar.number\n                        ? { ...car, fastestLap: updatedCar.fastestLap, currentLap: updatedCar.currentLap }\n                        : car\n                )\n            );\n        });\n\n        socket.on(\"last_call_message\", (data) => {\n            setHideButtons(data);\n        });\n\n        return () => {\n            socket.off(\"init-cars\");\n            socket.off(\"update-car\");\n            socket.off(\"last_call_message\");\n        };\n    }, [socket]);\n\n    // Button handler\n    const handleLapCross = (carNumber) => {\n        const timestamp = Date.now();\n        setCars((prevCars) =>\n            prevCars.map((car) =>\n                car.number === carNumber\n                    ? { ...car, currentLap: (car.currentLap || 0) + 1 }\n                    : car\n            )\n        );\n        socket.emit(\"lap-cross\", { carNumber, timestamp });\n    };\n\n    return (\n        <Container className=\"mt-4\">\n            <h1 className=\"text-center mb-4\">Lap Line Tracker</h1>\n            {hideButtons && <Alert variant=\"danger\">Race over</Alert>}\n            {!hideButtons && (\n                <>\n                    {cars.length <= 0 ? (\n                        <Alert variant=\"warning\">No cars available</Alert>\n                    ) : (\n                        <Row className=\"g-4\">\n                            {cars.map((car) => (\n                                <Col key={car.number} xs={6} lg={3}>\n                                    <Card\n                                        className=\"shadow h-100\"\n                                        onClick={() => handleLapCross(car.number)}\n                                        style={{ cursor: \"pointer\" , backgroundColor: \"#32CD32\" }}\n                                    >\n                                        <Card.Body>\n                                            <Card.Title style={{fontSize: \"18px\"}}>Car: <span style={{fontSize: \"30px\"}}>#{car.number}</span></Card.Title>\n                                            <Card.Text>\n                                                <strong>Lap:</strong> {car.currentLap || 0} <br />\n                                                <strong>Fastest Lap:</strong> {car.fastestLap ? `${car.fastestLap} ms` : \"N/A\"}\n                                            </Card.Text>\n                                        </Card.Body>\n                                    </Card>\n                                </Col>\n                            ))}\n                        </Row>\n                    )}\n                </>\n            )}\n        </Container>\n    );\n}\n\nexport default LapLineTracker;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}