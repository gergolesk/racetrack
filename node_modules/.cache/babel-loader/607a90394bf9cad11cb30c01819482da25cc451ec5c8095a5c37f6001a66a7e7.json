{"ast":null,"code":"var _jsxFileName = \"/home/georg/kood/racetrack/src/front/components/FrontDesk.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useSession } from \"./SessionContext\";\nimport Button from \"../Button/Button\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction FrontDesk({\n  socket\n}) {\n  _s();\n  const raceTime = process.env.NODE_ENV === \"development\" ? 1 : 10;\n  const maxDrivers = parseInt(process.env.REACT_APP_MAX_DRIVERS, 10) || 8;\n  const intervalTime = parseInt(process.env.REACT_APP_INTERVAL_ENV, 10) || 5;\n  const currentTimePlusMin = new Date();\n  currentTimePlusMin.setMinutes(currentTimePlusMin.getMinutes() + intervalTime);\n  const [sessions, setSessions] = useSession();\n  const [drivers, setDrivers] = useState(Array.from({\n    length: maxDrivers\n  }, () => ({\n    name: '',\n    carNumber: ''\n  })));\n  const [sessionDate, setSessionDate] = useState(currentTimePlusMin.toISOString().split('T')[0]);\n  const [sessionTime, setSessionTime] = useState(currentTimePlusMin.toTimeString().slice(0, 5));\n  const [editingSession, setEditingSession] = useState(null);\n  const [error, setError] = useState('');\n  const createOrUpdateSession = () => {\n    const sessionStartTime = new Date(`${sessionDate}T${sessionTime}`);\n    const filledDrivers = drivers.filter(driver => driver.name.trim() !== '');\n\n    //create session with data\n    const sessionData = {\n      startTime: sessionStartTime.toISOString(),\n      hasStarted: false,\n      hasFinished: false,\n      drivers: filledDrivers.map(driver => ({\n        name: driver.name.trim(),\n        carNumber: driver.carNumber,\n        // Ensure carNumber is included\n        laps: 0,\n        fastestLap: 0\n      }))\n    };\n\n    //if session drivers empty stop\n    if (sessionData.drivers.length === 0) {\n      setError('At least one driver is required.');\n      return;\n    }\n    if (editingSession !== null) {\n      socket.emit(\"update_session\", {\n        index: editingSession,\n        sessionData\n      });\n      setEditingSession(null);\n    } else {\n      //send to server and clear up the data\n      socket.emit(\"add_session\", sessionData);\n    }\n    sessionStartTime.setMinutes(sessionStartTime.getMinutes() + raceTime + intervalTime);\n    setSessionTime(sessionStartTime.toTimeString().slice(0, 5));\n    setDrivers(Array.from({\n      length: maxDrivers\n    }, () => ({\n      name: '',\n      carNumber: ''\n    })));\n    setError('');\n  };\n  useEffect(() => {\n    const handleReceiveSession = sessions => {\n      setSessions(sessions); // Update races with the received sessions\n    };\n    const handleSessionError = error => {\n      setError(error.message); // Set the error message for display\n    };\n    socket.on(\"receive_session\", handleReceiveSession);\n    socket.on(\"session_error\", handleSessionError);\n    return () => {\n      socket.off(\"receive_session\", handleReceiveSession);\n      socket.off(\"session_error\", handleSessionError);\n    };\n  }, [setSessions, socket]);\n  const checkDriverAndCarUnique = (value, index) => {\n    if (value === \"\") {\n      return;\n    }\n    const isUnique = drivers.every((driver, i) => {\n      if (i === index) return true;\n      return driver['name'] !== value;\n    });\n    if (!isUnique) {\n      setError(`The driver name ${value} is already in use.`);\n    }\n    return isUnique;\n  };\n\n  // on changing the name field\n  const handleDriverChange = (index, value) => {\n    const newDrivers = [...drivers];\n    newDrivers[index]['name'] = value;\n    newDrivers[index]['carNumber'] = index + 1;\n    setDrivers(newDrivers);\n    setError(''); // Clear error when user starts typing\n  };\n  function enableCreateRaceBtn() {\n    return drivers.some(driver => driver.name.trim() !== '');\n  }\n\n  // leaving the name field\n  const handleDriverBlur = (index, value) => {\n    if (!checkDriverAndCarUnique(value, index)) {\n      setError(`The driver name ${value} is already in use.`);\n    } else {\n      setError(''); // Clear error if unique\n    }\n  };\n  const getUpcomingSessions = () => {\n    if (!sessions) return;\n    return sessions.filter(session => !session.hasStarted).sort((a, b) => new Date(a.startTime) - new Date(b.startTime)); // Sort by startTime\n  };\n  function editRace(session, index) {\n    const raceDate = new Date(session.startTime);\n    // Set the current session data to state for editing\n    setSessionDate(raceDate.toISOString().split('T')[0]);\n    setSessionTime(raceDate.toTimeString().slice(0, 5));\n    const newDrivers = Array.from({\n      length: maxDrivers\n    }, (_, index) => ({\n      name: '',\n      carNumber: index + 1\n    }));\n    newDrivers.forEach(driver => {\n      const foundDriver = session.drivers.find(d => d.carNumber === driver.carNumber);\n      if (foundDriver) {\n        driver.name = foundDriver.name;\n      }\n    });\n    setDrivers(newDrivers);\n    setError('');\n    setEditingSession(index);\n  }\n  function deleteRace(index) {\n    console.log(index);\n    socket.emit(\"delete_session\", index);\n  }\n  function raceTimeField() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"raceTime\",\n        children: \"Race Start Time: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        id: \"raceTime\",\n        value: sessionTime,\n        onChange: e => setSessionTime(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 16\n    }, this);\n  }\n  function driverFields() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [...Array(maxDrivers)].map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Driver Name\",\n          value: drivers[index].name || '',\n          onChange: e => handleDriverChange(index, e.target.value)\n          //after leaving field\n          ,\n          onBlur: e => handleDriverBlur(index, e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          readOnly: true,\n          type: \"text\",\n          placeholder: \"Car Number\",\n          value: drivers[index].carNumber || index + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this))\n    }, void 0, false);\n  }\n  function raceDateField() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"raceDate\",\n        children: \"Race Date: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"raceDate\",\n        value: sessionDate,\n        onChange: e => setSessionDate(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 16\n    }, this);\n  }\n  function manageRace() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create Race\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }, this), raceDateField(), raceTimeField(), driverFields(), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: createOrUpdateSession,\n        disabled: !enableCreateRaceBtn(),\n        className: \"btn createBtn\",\n        children: editingSession !== null ? \"Update Race\" : \"Create Race\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 16\n    }, this);\n  }\n  function upcomingRacesList() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Races List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: getUpcomingSessions().map((race, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          id: index,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Start Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 25\n          }, this), \" \", new Date(race.startTime).toLocaleString(), \" |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Drivers:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 25\n          }, this), \" \", race.drivers.map(driver => `${driver.name} (Car: ${driver.carNumber})`).join(', '), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => editRace(race, index),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => deleteRace(index),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Race Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 23\n    }, this), \" \", manageRace(), upcomingRacesList()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 9\n  }, this);\n}\n_s(FrontDesk, \"mdONSNz7AFtHwR5OAmgztVjY5iU=\", false, function () {\n  return [useSession];\n});\n_c = FrontDesk;\nexport default FrontDesk;\nvar _c;\n$RefreshReg$(_c, \"FrontDesk\");","map":{"version":3,"names":["useEffect","useState","useSession","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","FrontDesk","socket","_s","raceTime","process","env","NODE_ENV","maxDrivers","parseInt","REACT_APP_MAX_DRIVERS","intervalTime","REACT_APP_INTERVAL_ENV","currentTimePlusMin","Date","setMinutes","getMinutes","sessions","setSessions","drivers","setDrivers","Array","from","length","name","carNumber","sessionDate","setSessionDate","toISOString","split","sessionTime","setSessionTime","toTimeString","slice","editingSession","setEditingSession","error","setError","createOrUpdateSession","sessionStartTime","filledDrivers","filter","driver","trim","sessionData","startTime","hasStarted","hasFinished","map","laps","fastestLap","emit","index","handleReceiveSession","handleSessionError","message","on","off","checkDriverAndCarUnique","value","isUnique","every","i","handleDriverChange","newDrivers","enableCreateRaceBtn","some","handleDriverBlur","getUpcomingSessions","session","sort","a","b","editRace","raceDate","_","forEach","foundDriver","find","d","deleteRace","console","log","raceTimeField","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","e","target","required","driverFields","placeholder","onBlur","readOnly","raceDateField","manageRace","onClick","disabled","className","upcomingRacesList","race","toLocaleString","join","_c","$RefreshReg$"],"sources":["/home/georg/kood/racetrack/src/front/components/FrontDesk.js"],"sourcesContent":["import {useEffect, useState} from 'react';\nimport {useSession} from \"./SessionContext\";\nimport Button from \"../Button/Button\";\n\nfunction FrontDesk({socket}) {\n    const raceTime = process.env.NODE_ENV === \"development\" ? 1 : 10\n    const maxDrivers = parseInt(process.env.REACT_APP_MAX_DRIVERS, 10) || 8\n    const intervalTime = parseInt(process.env.REACT_APP_INTERVAL_ENV, 10) || 5\n\n    const currentTimePlusMin = new Date()\n    currentTimePlusMin.setMinutes(currentTimePlusMin.getMinutes() + intervalTime)\n\n    const [sessions, setSessions] = useSession()\n    const [drivers, setDrivers] = useState(\n        Array.from({length: maxDrivers},\n            () => ({name: '', carNumber: ''})))\n    const [sessionDate, setSessionDate] = useState(currentTimePlusMin.toISOString().split('T')[0])\n    const [sessionTime, setSessionTime] = useState(currentTimePlusMin.toTimeString().slice(0, 5))\n    const [editingSession, setEditingSession] = useState(null)\n    const [error, setError] = useState('')\n\n    const createOrUpdateSession = () => {\n        const sessionStartTime = new Date(`${sessionDate}T${sessionTime}`)\n        const filledDrivers = drivers.filter(driver => driver.name.trim() !== '')\n\n        //create session with data\n        const sessionData = {\n            startTime: sessionStartTime.toISOString(),\n            hasStarted: false,\n            hasFinished: false,\n            drivers: filledDrivers.map(driver => ({\n                name: driver.name.trim(),\n                carNumber: driver.carNumber, // Ensure carNumber is included\n                laps: 0,\n                fastestLap: 0\n            }))\n        }\n\n        //if session drivers empty stop\n        if (sessionData.drivers.length === 0) {\n            setError('At least one driver is required.');\n            return;\n        }\n\n        if (editingSession !== null) {\n            socket.emit(\"update_session\", {index: editingSession, sessionData});\n            setEditingSession(null)\n        } else {\n            //send to server and clear up the data\n            socket.emit(\"add_session\", sessionData)\n        }\n\n        sessionStartTime.setMinutes(sessionStartTime.getMinutes() + raceTime + intervalTime)\n        setSessionTime(sessionStartTime.toTimeString().slice(0, 5))\n        setDrivers(Array.from({length: maxDrivers}, () => ({name: '', carNumber: ''})))\n        setError('')\n    }\n\n    useEffect(() => {\n        const handleReceiveSession = (sessions) => {\n            setSessions(sessions); // Update races with the received sessions\n        }\n        const handleSessionError = (error) => {\n            setError(error.message); // Set the error message for display\n        }\n\n        socket.on(\"receive_session\", handleReceiveSession)\n        socket.on(\"session_error\", handleSessionError)\n\n        return () => {\n            socket.off(\"receive_session\", handleReceiveSession)\n            socket.off(\"session_error\", handleSessionError)\n        }\n    }, [setSessions, socket])\n\n    const checkDriverAndCarUnique = (value, index) => {\n        if (value === \"\") {\n            return\n        }\n        const isUnique = drivers.every((driver, i) => {\n            if (i === index) return true\n            return driver['name'] !== value\n        })\n        if (!isUnique) {\n            setError(`The driver name ${value} is already in use.`)\n        }\n        return isUnique;\n    }\n\n    // on changing the name field\n    const handleDriverChange = (index, value) => {\n        const newDrivers = [...drivers]\n        newDrivers[index]['name'] = value\n        newDrivers[index]['carNumber'] = index + 1\n\n        setDrivers(newDrivers)\n        setError('') // Clear error when user starts typing\n    };\n\n    function enableCreateRaceBtn() {\n        return drivers.some(driver => driver.name.trim() !== '')\n    }\n\n    // leaving the name field\n    const handleDriverBlur = (index, value) => {\n        if (!checkDriverAndCarUnique(value, index)) {\n            setError(`The driver name ${value} is already in use.`)\n        } else {\n            setError('') // Clear error if unique\n        }\n    };\n\n    const getUpcomingSessions = () => {\n        if (!sessions) return\n\n        return sessions\n            .filter(session => !session.hasStarted)\n            .sort((a, b) => new Date(a.startTime) - new Date(b.startTime)); // Sort by startTime\n    };\n\n    function editRace(session, index) {\n        const raceDate = new Date(session.startTime)\n        // Set the current session data to state for editing\n        setSessionDate(raceDate.toISOString().split('T')[0]);\n        setSessionTime(raceDate.toTimeString().slice(0, 5));\n\n        const newDrivers = Array.from({length: maxDrivers},\n            (_, index) => ({name: '', carNumber: index + 1}))\n\n        newDrivers.forEach((driver) => {\n            const foundDriver = session.drivers.find(d => d.carNumber === driver.carNumber)\n            if (foundDriver) {\n                driver.name = foundDriver.name\n            }\n        })\n        setDrivers(newDrivers)\n        setError('')\n        setEditingSession(index)\n    }\n\n    function deleteRace(index) {\n        console.log(index)\n        socket.emit(\"delete_session\", index)\n    }\n\n    function raceTimeField() {\n        return <div>\n            <label htmlFor=\"raceTime\">Race Start Time: </label>\n            <input\n                type=\"time\"\n                id=\"raceTime\"\n                value={sessionTime}\n                onChange={(e) => setSessionTime(e.target.value)}\n                required\n            />\n        </div>;\n    }\n\n    function driverFields() {\n        return <>\n            {[...Array(maxDrivers)].map((_, index) => (\n                <div key={index}>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Driver Name\"\n                        value={drivers[index].name || ''}\n                        onChange={(e) => handleDriverChange(index, e.target.value)}\n                        //after leaving field\n                        onBlur={(e) => handleDriverBlur(index, e.target.value)}\n                    />\n                    <input\n                        readOnly\n                        type=\"text\"\n                        placeholder=\"Car Number\"\n                        value={drivers[index].carNumber || index + 1}\n                    />\n                </div>\n            ))}\n        </>;\n    }\n\n    function raceDateField() {\n        return <div>\n            <label htmlFor=\"raceDate\">Race Date: </label>\n            <input\n                type=\"date\"\n                id=\"raceDate\"\n                value={sessionDate}\n                onChange={(e) => setSessionDate(e.target.value)}\n                required\n            />\n        </div>;\n    }\n\n    function manageRace() {\n        return <div>\n            <h2>Create Race</h2>\n            {raceDateField()}\n            {raceTimeField()}\n            {driverFields()}\n            <br/>\n            <Button onClick={createOrUpdateSession} disabled={!enableCreateRaceBtn()} className=\"btn createBtn\">\n                {editingSession !== null ? \"Update Race\" : \"Create Race\"}\n            </Button>\n        </div>;\n    }\n\n    function upcomingRacesList() {\n        return <div>\n            <h2>Races List</h2>\n            <ul>\n                {getUpcomingSessions().map((race, index) => (\n                    <li id={index}>\n                        <strong>Start Time:</strong> {new Date(race.startTime).toLocaleString()} |\n                        <strong>Drivers:</strong> {race.drivers.map(driver => `${driver.name} (Car: ${driver.carNumber})`).join(', ')}\n                        <Button onClick={() => editRace(race, index)}>Edit</Button>\n                        <Button onClick={() => deleteRace(index)}>Delete</Button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    }\n\n    return (\n        <div>\n            <h1>Race Management</h1>\n            {error && <div className=\"error\">{error}</div>} {/* Display error messages */}\n            {manageRace()}\n\n            {upcomingRacesList()}\n        </div>\n    );\n}\n\nexport default FrontDesk;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}