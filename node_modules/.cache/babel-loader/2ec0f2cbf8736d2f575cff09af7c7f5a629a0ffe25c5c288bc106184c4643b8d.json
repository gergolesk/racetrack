{"ast":null,"code":"var _jsxFileName = \"/home/georg/kood/racetrack/src/front/pages/FrontDeskPage.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useSession } from \"./components/SessionContext\";\nimport Button from \"./components/Button/Button\";\nimport { Card } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction FrontDeskPage({\n  socket\n}) {\n  _s();\n  const raceTime = process.env.NODE_ENV === \"development\" ? 1 : 10;\n  const maxDrivers = parseInt(process.env.REACT_APP_MAX_DRIVERS, 10) || 8;\n  const intervalTime = parseInt(process.env.REACT_APP_INTERVAL_ENV, 10) || 5;\n  const currentTimePlusMin = new Date();\n  currentTimePlusMin.setMinutes(currentTimePlusMin.getMinutes() + intervalTime);\n  const [sessions, setSessions] = useSession();\n  const [drivers, setDrivers] = useState(Array.from({\n    length: maxDrivers\n  }, () => ({\n    name: '',\n    carNumber: ''\n  })));\n  //TODO Change input date to localdate\n  const [sessionDate, setSessionDate] = useState(currentTimePlusMin.toISOString().split('T')[0]);\n  const [sessionTime, setSessionTime] = useState(currentTimePlusMin.toTimeString().slice(0, 5));\n  const [editingSession, setEditingSession] = useState(null);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    socket.emit(\"get_all_sessions\");\n    // eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    const handleReceiveSession = sessions => {\n      if (sessions && sessions.length > 0) {\n        setSessions(sessions);\n      } else {\n        setSessions([]);\n      }\n    };\n    const handleSessionError = error => {\n      setError(error.message); // Set the error message for display\n    };\n    socket.on(\"receive_session\", handleReceiveSession);\n    socket.on(\"session_error\", handleSessionError);\n    return () => {\n      socket.off(\"receive_session\");\n      socket.off(\"session_error\");\n    };\n  }, [setSessions, socket]);\n  const createOrUpdateSession = () => {\n    const sessionStartTime = new Date(`${sessionDate}T${sessionTime}`);\n    if (sessionStartTime < new Date()) {\n      setError(\"The start time cannot be in the past\");\n      return;\n    }\n    const filledDrivers = drivers.filter(driver => driver.name.trim() !== '');\n\n    //create session with data\n    const sessionData = {\n      startTime: sessionStartTime.toISOString(),\n      hasStarted: false,\n      hasFinished: false,\n      drivers: filledDrivers.map(driver => ({\n        name: driver.name.trim(),\n        carNumber: driver.carNumber,\n        // Ensure carNumber is included\n        laps: 0,\n        fastestLap: 0\n      }))\n    };\n\n    //if session drivers empty stop\n    if (sessionData.drivers.length === 0) {\n      setError('At least one driver is required.');\n      return;\n    }\n    checkDriverAndCarUnique();\n    if (editingSession !== null) {\n      socket.emit(\"update_session\", {\n        id: editingSession,\n        sessionData\n      });\n      setEditingSession(null);\n    } else {\n      console.log(\"add session\");\n      socket.emit(\"add_session\", sessionData);\n    }\n    sessionStartTime.setMinutes(sessionStartTime.getMinutes() + raceTime + intervalTime);\n    setSessionTime(sessionStartTime.toTimeString().slice(0, 5));\n    setDrivers(Array.from({\n      length: maxDrivers\n    }, () => ({\n      name: '',\n      carNumber: ''\n    })));\n    setError('');\n  };\n  const checkDriverAndCarUnique = () => {\n    let checkedDrivers = new Set();\n    for (const driver of drivers.filter(driver => driver.name !== \"\")) {\n      if (checkedDrivers.has(driver.name)) {\n        return false;\n      } else {\n        checkedDrivers.add(driver.name);\n      }\n    }\n    return true;\n  };\n\n  // on changing the name field\n  const handleDriverChange = (index, value) => {\n    const newDrivers = [...drivers];\n    newDrivers[index]['name'] = value;\n    newDrivers[index]['carNumber'] = index + 1;\n    setDrivers(newDrivers);\n    setError(''); // Clear error when user starts typing\n  };\n  function enableCreateRaceBtn() {\n    return drivers.some(driver => driver.name.trim() !== '');\n  }\n\n  // leaving the name field\n  const handleDriverBlur = () => {\n    if (!checkDriverAndCarUnique()) {\n      setError(`All driver name must by unique.`);\n    } else {\n      setError(''); // Clear error if unique\n    }\n  };\n  const getUpcomingSessions = () => {\n    if (!sessions) return;\n    return sessions.filter(session => !session.hasStarted).sort((a, b) => new Date(a.startTime) - new Date(b.startTime)); // Sort by startTime\n  };\n  function editRace(session) {\n    const raceDate = new Date(session.startTime);\n    // Set the current session data to state for editing\n    setSessionDate(raceDate.toISOString().split('T')[0]);\n    setSessionTime(raceDate.toTimeString().slice(0, 5));\n    const newDrivers = Array.from({\n      length: maxDrivers\n    }, (_, index) => ({\n      name: '',\n      carNumber: index + 1\n    }));\n    newDrivers.forEach(driver => {\n      const foundDriver = session.drivers.find(d => d.carNumber === driver.carNumber);\n      if (foundDriver) {\n        driver.name = foundDriver.name;\n      }\n    });\n    setDrivers(newDrivers);\n    setError('');\n    setEditingSession(session.id);\n  }\n  function deleteRace(id) {\n    console.log(id);\n    socket.emit(\"delete_session\", id);\n  }\n  function raceTimeField() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-label\",\n        htmlFor: \"raceTime\",\n        children: \"Race Start Time: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control\",\n        type: \"time\",\n        id: \"raceTime\",\n        value: sessionTime,\n        onChange: e => setSessionTime(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 16\n    }, this);\n  }\n  function driverFields() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [...Array(maxDrivers)].map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mb-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            type: \"text\",\n            placeholder: \"Driver Name\",\n            value: drivers[index].name || '',\n            onChange: e => handleDriverChange(index, e.target.value)\n            //after leaving field\n            ,\n            onBlur: () => handleDriverBlur()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            readOnly: true,\n            type: \"text\",\n            placeholder: \"Car Number\",\n            value: drivers[index].carNumber || index + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this))\n    }, void 0, false);\n  }\n  function raceDateField() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-label\",\n        htmlFor: \"raceDate\",\n        children: \"Race Date: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control\",\n        type: \"date\",\n        id: \"raceDate\",\n        value: sessionDate,\n        onChange: e => setSessionDate(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 16\n    }, this);\n  }\n  function manageRace() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card p-4 mb-4 shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"card-title\",\n        children: \"Create Race\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }, this), raceDateField(), raceTimeField(), driverFields(), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: createOrUpdateSession,\n        disabled: !enableCreateRaceBtn() || error !== \"\",\n        className: \"btn createBtn\",\n        children: editingSession !== null ? \"Update Race\" : \"Create Race\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 16\n    }, this);\n  }\n  function upcomingRacesList() {\n    const upcomingSessions = getUpcomingSessions();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 mb-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center mb-4\",\n        children: \"Races List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-wrap gap-4 justify-content-center\",\n        children: upcomingSessions && upcomingSessions.length > 0 ? upcomingSessions.map(race => /*#__PURE__*/_jsxDEV(Card, {\n          className: \"shadow-lg d-flex flex-column\",\n          style: {\n            width: '18rem'\n          },\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            className: \"d-flex flex-column\",\n            children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n              children: \"Race Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Card.Subtitle, {\n              className: \"mb-2 text-muted\",\n              children: [\"Start Time: \", new Date(race.startTime).toLocaleString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Drivers:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 66\n              }, this), race.drivers.length > 0 ? race.drivers.map(driver => /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [driver.name, \" (Car: \", driver.carNumber, \")\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 249,\n                  columnNumber: 76\n                }, this)]\n              }, driver.carNumber, true, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 49\n              }, this)) : /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"No drivers available\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 47\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-auto d-flex justify-content-between\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"secondary\",\n                size: \"sm\",\n                onClick: () => editRace(race),\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"danger\",\n                size: \"sm\",\n                onClick: () => deleteRace(race.id),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 33\n          }, this)\n        }, race.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-muted\",\n          children: \"No upcoming races available.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4 \",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center mb-4\",\n      children: \"Race Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 23\n    }, this), \" \", manageRace(), upcomingRacesList()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 9\n  }, this);\n}\n_s(FrontDeskPage, \"fJjX6sfxsiGOPsLOLSdDqtTqQCE=\", false, function () {\n  return [useSession];\n});\n_c = FrontDeskPage;\nexport default FrontDeskPage;\nvar _c;\n$RefreshReg$(_c, \"FrontDeskPage\");","map":{"version":3,"names":["useEffect","useState","useSession","Button","Card","jsxDEV","_jsxDEV","Fragment","_Fragment","FrontDeskPage","socket","_s","raceTime","process","env","NODE_ENV","maxDrivers","parseInt","REACT_APP_MAX_DRIVERS","intervalTime","REACT_APP_INTERVAL_ENV","currentTimePlusMin","Date","setMinutes","getMinutes","sessions","setSessions","drivers","setDrivers","Array","from","length","name","carNumber","sessionDate","setSessionDate","toISOString","split","sessionTime","setSessionTime","toTimeString","slice","editingSession","setEditingSession","error","setError","emit","handleReceiveSession","handleSessionError","message","on","off","createOrUpdateSession","sessionStartTime","filledDrivers","filter","driver","trim","sessionData","startTime","hasStarted","hasFinished","map","laps","fastestLap","checkDriverAndCarUnique","id","console","log","checkedDrivers","Set","has","add","handleDriverChange","index","value","newDrivers","enableCreateRaceBtn","some","handleDriverBlur","getUpcomingSessions","session","sort","a","b","editRace","raceDate","_","forEach","foundDriver","find","d","deleteRace","raceTimeField","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","required","driverFields","placeholder","onBlur","readOnly","raceDateField","manageRace","onClick","disabled","upcomingRacesList","upcomingSessions","race","style","width","Body","Title","Subtitle","toLocaleString","Text","variant","size","_c","$RefreshReg$"],"sources":["/home/georg/kood/racetrack/src/front/pages/FrontDeskPage.js"],"sourcesContent":["import {useEffect, useState} from 'react';\nimport {useSession} from \"./components/SessionContext\";\nimport Button from \"./components/Button/Button\";\nimport {Card} from \"react-bootstrap\";\n\nfunction FrontDeskPage({socket}) {\n\n    const raceTime = process.env.NODE_ENV === \"development\" ? 1 : 10\n    const maxDrivers = parseInt(process.env.REACT_APP_MAX_DRIVERS, 10) || 8\n    const intervalTime = parseInt(process.env.REACT_APP_INTERVAL_ENV, 10) || 5\n\n    const currentTimePlusMin = new Date()\n    currentTimePlusMin.setMinutes(currentTimePlusMin.getMinutes() + intervalTime)\n\n    const [sessions, setSessions] = useSession()\n    const [drivers, setDrivers] = useState(\n        Array.from({length: maxDrivers},\n            () => ({name: '', carNumber: ''})))\n    //TODO Change input date to localdate\n    const [sessionDate, setSessionDate] = useState(currentTimePlusMin.toISOString().split('T')[0])\n    const [sessionTime, setSessionTime] = useState(currentTimePlusMin.toTimeString().slice(0, 5))\n    const [editingSession, setEditingSession] = useState(null)\n    const [error, setError] = useState('')\n    useEffect(() => {\n        socket.emit(\"get_all_sessions\")\n        // eslint-disable-next-line\n    }, [])\n    useEffect(() => {\n        const handleReceiveSession = (sessions) => {\n            if (sessions && sessions.length > 0) {\n                setSessions(sessions);\n            } else {\n                setSessions([])\n            }\n        }\n        const handleSessionError = (error) => {\n            setError(error.message); // Set the error message for display\n        }\n\n        socket.on(\"receive_session\", handleReceiveSession)\n        socket.on(\"session_error\", handleSessionError)\n\n        return () => {\n            socket.off(\"receive_session\")\n            socket.off(\"session_error\")\n        }\n    }, [setSessions, socket])\n\n    const createOrUpdateSession = () => {\n        const sessionStartTime = new Date(`${sessionDate}T${sessionTime}`)\n        if (sessionStartTime < new Date()) {\n            setError(\"The start time cannot be in the past\")\n            return;\n        }\n        const filledDrivers = drivers.filter(driver => driver.name.trim() !== '')\n\n        //create session with data\n        const sessionData = {\n            startTime: sessionStartTime.toISOString(),\n            hasStarted: false,\n            hasFinished: false,\n            drivers: filledDrivers.map(driver => ({\n                name: driver.name.trim(),\n                carNumber: driver.carNumber, // Ensure carNumber is included\n                laps: 0,\n                fastestLap: 0\n            }))\n        }\n\n        //if session drivers empty stop\n        if (sessionData.drivers.length === 0) {\n            setError('At least one driver is required.');\n            return;\n        }\n        checkDriverAndCarUnique()\n        if (editingSession !== null) {\n            socket.emit(\"update_session\", {id: editingSession, sessionData});\n            setEditingSession(null)\n        } else {\n            console.log(\"add session\")\n            socket.emit(\"add_session\", sessionData)\n        }\n\n        sessionStartTime.setMinutes(sessionStartTime.getMinutes() + raceTime + intervalTime)\n        setSessionTime(sessionStartTime.toTimeString().slice(0, 5))\n        setDrivers(Array.from({length: maxDrivers}, () => ({name: '', carNumber: ''})))\n        setError('')\n    }\n\n    const checkDriverAndCarUnique = () => {\n        let checkedDrivers = new Set()\n        for (const driver of drivers.filter(driver => driver.name !== \"\")) {\n            if (checkedDrivers.has(driver.name)) {\n                return false\n            } else {\n                checkedDrivers.add(driver.name)\n            }\n        }\n        return true\n    }\n\n    // on changing the name field\n    const handleDriverChange = (index, value) => {\n        const newDrivers = [...drivers]\n        newDrivers[index]['name'] = value\n        newDrivers[index]['carNumber'] = index + 1\n\n        setDrivers(newDrivers)\n        setError('') // Clear error when user starts typing\n    };\n\n    function enableCreateRaceBtn() {\n        return drivers.some(driver => driver.name.trim() !== '')\n    }\n\n    // leaving the name field\n    const handleDriverBlur = () => {\n        if (!checkDriverAndCarUnique()) {\n            setError(`All driver name must by unique.`)\n        } else {\n            setError('') // Clear error if unique\n        }\n    };\n\n    const getUpcomingSessions = () => {\n        if (!sessions) return\n\n        return sessions\n            .filter(session => !session.hasStarted)\n            .sort((a, b) => new Date(a.startTime) - new Date(b.startTime)); // Sort by startTime\n    };\n\n    function editRace(session) {\n        const raceDate = new Date(session.startTime)\n        // Set the current session data to state for editing\n        setSessionDate(raceDate.toISOString().split('T')[0]);\n        setSessionTime(raceDate.toTimeString().slice(0, 5));\n\n        const newDrivers = Array.from({length: maxDrivers},\n            (_, index) => ({name: '', carNumber: index + 1}))\n\n        newDrivers.forEach((driver) => {\n            const foundDriver = session.drivers.find(d => d.carNumber === driver.carNumber)\n            if (foundDriver) {\n                driver.name = foundDriver.name\n            }\n        })\n        setDrivers(newDrivers)\n        setError('')\n        setEditingSession(session.id)\n    }\n\n    function deleteRace(id) {\n        console.log(id)\n        socket.emit(\"delete_session\", id)\n    }\n\n    function raceTimeField() {\n        return <div className=\"mb-3\">\n            <label className=\"form-label\" htmlFor=\"raceTime\">Race Start Time: </label>\n            <input\n                className=\"form-control\"\n                type=\"time\"\n                id=\"raceTime\"\n                value={sessionTime}\n                onChange={(e) => setSessionTime(e.target.value)}\n                required\n            />\n        </div>;\n    }\n\n    function driverFields() {\n        return <>\n            {[...Array(maxDrivers)].map((_, index) => (\n                <div key={index} className=\"row mb-2\">\n                    <div className=\"col\">\n                        <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            placeholder=\"Driver Name\"\n                            value={drivers[index].name || ''}\n                            onChange={(e) => handleDriverChange(index, e.target.value)}\n                            //after leaving field\n                            onBlur={() => handleDriverBlur()}\n                        />\n                    </div>\n                    <div className=\"col\">\n                        <input\n                            className=\"form-control\"\n                            readOnly\n                            type=\"text\"\n                            placeholder=\"Car Number\"\n                            value={drivers[index].carNumber || index + 1}\n                        />\n                    </div>\n                </div>\n            ))}\n        </>\n    }\n\n    function raceDateField() {\n        return <div className=\"mb-3\">\n            <label className=\"form-label\" htmlFor=\"raceDate\">Race Date: </label>\n            <input\n                className=\"form-control\"\n                type=\"date\"\n                id=\"raceDate\"\n                value={sessionDate}\n                onChange={(e) => setSessionDate(e.target.value)}\n                required\n            />\n        </div>;\n    }\n\n    function manageRace() {\n        return <div className=\"card p-4 mb-4 shadow-lg\">\n            <h2 className=\"card-title\">Create Race</h2>\n            {raceDateField()}\n            {raceTimeField()}\n            {driverFields()}\n            <br/>\n            <Button onClick={createOrUpdateSession} disabled={!enableCreateRaceBtn() || error !== \"\"}\n                    className=\"btn createBtn\">\n                {editingSession !== null ? \"Update Race\" : \"Create Race\"}\n            </Button>\n        </div>;\n    }\n\n    function upcomingRacesList() {\n        const upcomingSessions = getUpcomingSessions();\n\n        return (\n            <div className=\"mt-4 mb-5\">\n                <h2 className=\"text-center mb-4\">Races List</h2>\n                <div className=\"d-flex flex-wrap gap-4 justify-content-center\">\n                    {upcomingSessions && upcomingSessions.length > 0 ? (\n                        upcomingSessions.map((race) => (\n                            <Card key={race.id} className=\"shadow-lg d-flex flex-column\" style={{width: '18rem'}}>\n                                <Card.Body className=\"d-flex flex-column\">\n                                    <Card.Title>Race Details</Card.Title>\n                                    <Card.Subtitle className=\"mb-2 text-muted\">\n                                        Start Time: {new Date(race.startTime).toLocaleString()}\n                                    </Card.Subtitle>\n                                    <Card.Text>\n                                        <strong>Drivers:</strong><br/>\n                                        {race.drivers.length > 0\n                                            ? race.drivers.map(driver => (\n                                                <span key={driver.carNumber}>\n                                    {driver.name} (Car: {driver.carNumber})<br/>\n                                </span>\n                                            ))\n                                            : <span>No drivers available</span>}\n                                    </Card.Text>\n                                    <div className=\"mt-auto d-flex justify-content-between\">\n                                        <Button\n                                            variant=\"secondary\"\n                                            size=\"sm\"\n                                            onClick={() => editRace(race)}\n                                        >\n                                            Edit\n                                        </Button>\n                                        <Button\n                                            variant=\"danger\"\n                                            size=\"sm\"\n                                            onClick={() => deleteRace(race.id)}\n                                        >\n                                            Delete\n                                        </Button>\n                                    </div>\n                                </Card.Body>\n                            </Card>\n                        ))\n                    ) : (\n                        <p className=\"text-muted\">No upcoming races available.</p>\n                    )}\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"container mt-4 \">\n            <h1 className=\"text-center mb-4\">Race Management</h1>\n            {/*TODO: Make error red*/}\n            {error && <div className=\"alert alert-danger\">{error}</div>} {/* Display error messages */}\n            {manageRace()}\n            {upcomingRacesList()}\n        </div>\n    );\n}\n\nexport default FrontDeskPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}