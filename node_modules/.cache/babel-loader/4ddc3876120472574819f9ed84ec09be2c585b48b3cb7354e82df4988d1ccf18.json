{"ast":null,"code":"var _jsxFileName = \"/home/georg/kood/racetrack/src/front/Button/FullscreenButton.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Button from \"./Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FullscreenButton = () => {\n  _s();\n  const [targetRef, setTargetRef] = useState(null);\n  const buttonRef = useRef(null);\n  useEffect(() => {\n    // Function to find the target element\n    const updateTargetRef = () => {\n      const targetElement = document.querySelector('.fullscreenDiv');\n      setTargetRef(targetElement);\n    };\n\n    // Initial check for the target element\n    updateTargetRef();\n\n    // Create a MutationObserver to watch for changes in the DOM\n    const observer = new MutationObserver(updateTargetRef);\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n\n    // Cleanup observer on component unmount\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  //exit fullscreen on mousedown\n  useEffect(() => {\n    const handleClick = () => {\n      if (targetRef && document.fullscreenElement) {\n        document.exitFullscreen();\n      }\n    };\n    document.addEventListener('mousedown', handleClick);\n    return () => {\n      document.removeEventListener('mousedown', handleClick);\n    };\n  }, [targetRef]);\n  const toggleFullScreen = () => {\n    if (!document.fullscreenElement) {\n      if (targetRef) {\n        targetRef.requestFullscreen().catch(err => {\n          console.log(\"Error attempting to enable fullscreen: \", err);\n        });\n      }\n    } else {\n      document.exitFullscreen();\n    }\n  };\n  if (!targetRef) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: buttonRef,\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      onClick: toggleFullScreen,\n      variant: \"primary\",\n      children: \"Fullscreen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(FullscreenButton, \"lgsE0TI1id/hkkX06K11yGPOa2I=\");\n_c = FullscreenButton;\nexport default FullscreenButton;\nvar _c;\n$RefreshReg$(_c, \"FullscreenButton\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Button","jsxDEV","_jsxDEV","FullscreenButton","_s","targetRef","setTargetRef","buttonRef","updateTargetRef","targetElement","document","querySelector","observer","MutationObserver","observe","body","childList","subtree","disconnect","handleClick","fullscreenElement","exitFullscreen","addEventListener","removeEventListener","toggleFullScreen","requestFullscreen","catch","err","console","log","ref","children","onClick","variant","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/georg/kood/racetrack/src/front/Button/FullscreenButton.js"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport Button from \"./Button\";\n\nconst FullscreenButton = () => {\n    const [targetRef, setTargetRef] = useState(null)\n    const buttonRef = useRef(null)\n\n    useEffect(() => {\n        // Function to find the target element\n        const updateTargetRef = () => {\n            const targetElement = document.querySelector('.fullscreenDiv');\n            setTargetRef(targetElement);\n        };\n\n        // Initial check for the target element\n        updateTargetRef();\n\n        // Create a MutationObserver to watch for changes in the DOM\n        const observer = new MutationObserver(updateTargetRef);\n        observer.observe(document.body, {childList: true, subtree: true});\n\n        // Cleanup observer on component unmount\n        return () => {\n            observer.disconnect();\n        };\n    }, [])\n\n    //exit fullscreen on mousedown\n    useEffect(() => {\n        const handleClick = () => {\n            if (targetRef && document.fullscreenElement) {\n                document.exitFullscreen()\n            }\n        }\n        document.addEventListener('mousedown', handleClick)\n        return () => {\n            document.removeEventListener('mousedown', handleClick)\n        }\n    }, [targetRef]);\n\n    const toggleFullScreen = () => {\n        if (!document.fullscreenElement) {\n            if (targetRef) {\n                targetRef.requestFullscreen().catch(err => {\n                    console.log(\"Error attempting to enable fullscreen: \", err)\n                })\n            }\n        } else {\n            document.exitFullscreen()\n        }\n    }\n\n    if (!targetRef) {\n        return null\n    }\n\n    return (\n        <div ref={buttonRef}>\n            <Button onClick={toggleFullScreen} variant=\"primary\">\n                Fullscreen\n            </Button>\n        </div>\n    )\n}\n\nexport default FullscreenButton"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAO,OAAO;AACxD,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAMQ,SAAS,GAAGT,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACZ;IACA,MAAMW,eAAe,GAAGA,CAAA,KAAM;MAC1B,MAAMC,aAAa,GAAGC,QAAQ,CAACC,aAAa,CAAC,gBAAgB,CAAC;MAC9DL,YAAY,CAACG,aAAa,CAAC;IAC/B,CAAC;;IAED;IACAD,eAAe,CAAC,CAAC;;IAEjB;IACA,MAAMI,QAAQ,GAAG,IAAIC,gBAAgB,CAACL,eAAe,CAAC;IACtDI,QAAQ,CAACE,OAAO,CAACJ,QAAQ,CAACK,IAAI,EAAE;MAACC,SAAS,EAAE,IAAI;MAAEC,OAAO,EAAE;IAAI,CAAC,CAAC;;IAEjE;IACA,OAAO,MAAM;MACTL,QAAQ,CAACM,UAAU,CAAC,CAAC;IACzB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;;EAEN;EACArB,SAAS,CAAC,MAAM;IACZ,MAAMsB,WAAW,GAAGA,CAAA,KAAM;MACtB,IAAId,SAAS,IAAIK,QAAQ,CAACU,iBAAiB,EAAE;QACzCV,QAAQ,CAACW,cAAc,CAAC,CAAC;MAC7B;IACJ,CAAC;IACDX,QAAQ,CAACY,gBAAgB,CAAC,WAAW,EAAEH,WAAW,CAAC;IACnD,OAAO,MAAM;MACTT,QAAQ,CAACa,mBAAmB,CAAC,WAAW,EAAEJ,WAAW,CAAC;IAC1D,CAAC;EACL,CAAC,EAAE,CAACd,SAAS,CAAC,CAAC;EAEf,MAAMmB,gBAAgB,GAAGA,CAAA,KAAM;IAC3B,IAAI,CAACd,QAAQ,CAACU,iBAAiB,EAAE;MAC7B,IAAIf,SAAS,EAAE;QACXA,SAAS,CAACoB,iBAAiB,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,IAAI;UACvCC,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAEF,GAAG,CAAC;QAC/D,CAAC,CAAC;MACN;IACJ,CAAC,MAAM;MACHjB,QAAQ,CAACW,cAAc,CAAC,CAAC;IAC7B;EACJ,CAAC;EAED,IAAI,CAAChB,SAAS,EAAE;IACZ,OAAO,IAAI;EACf;EAEA,oBACIH,OAAA;IAAK4B,GAAG,EAAEvB,SAAU;IAAAwB,QAAA,eAChB7B,OAAA,CAACF,MAAM;MAACgC,OAAO,EAAER,gBAAiB;MAACS,OAAO,EAAC,SAAS;MAAAF,QAAA,EAAC;IAErD;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAAAjC,EAAA,CA5DKD,gBAAgB;AAAAmC,EAAA,GAAhBnC,gBAAgB;AA8DtB,eAAeA,gBAAgB;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}