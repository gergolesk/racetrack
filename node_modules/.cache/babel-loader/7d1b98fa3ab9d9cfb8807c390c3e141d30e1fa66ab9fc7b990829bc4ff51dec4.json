{"ast":null,"code":"var _jsxFileName = \"/home/georg/kood/racetrack/src/front/components/FrontDesk.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useSession } from \"../../back/SessionContext\";\nimport { Button } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction FrontDesk({\n  socket\n}) {\n  _s();\n  const raceTime = process.env.NODE_ENV === \"development\" ? 1 : 10;\n  const maxDrivers = parseInt(process.env.REACT_APP_MAX_DRIVERS);\n  const intervalTime = parseInt(process.env.REACT_APP_INTERVAL_ENV);\n  console.log(`${maxDrivers} max drivers, ${raceTime} raceTime, ${intervalTime} intevaltime`);\n  const currentTimePlusMin = new Date();\n  currentTimePlusMin.setMinutes(currentTimePlusMin.getMinutes() + intervalTime);\n  const [sessions, setSessions] = useSession();\n  const [drivers, setDrivers] = useState(Array.from({\n    length: maxDrivers\n  }, () => ({\n    name: '',\n    carNumber: ''\n  })));\n  const [sessionDate, setSessionDate] = useState(currentTimePlusMin.toISOString().split('T')[0]);\n  const [sessionTime, setSessionTime] = useState(currentTimePlusMin.toTimeString().slice(0, 5));\n  const [error, setError] = useState('');\n  const createNewSession = () => {\n    const sessionStartTime = new Date(`${sessionDate}T${sessionTime}`);\n    const filledDrivers = drivers.filter(driver => driver.name.trim() !== '');\n\n    //create session with data\n    const sessionData = {\n      startTime: sessionStartTime.toISOString(),\n      drivers: filledDrivers.map(driver => ({\n        name: driver.name.trim(),\n        carNumber: driver.carNumber // Ensure carNumber is included\n      }))\n    };\n\n    //if session drivers empty stop\n    if (sessionData.drivers.length === 0) {\n      setError('At least one driver is required.');\n      return;\n    }\n\n    //send to server and clear up the data\n    socket.emit(\"add_session\", sessionData);\n    sessionStartTime.setMinutes(sessionStartTime.getMinutes() + raceTime + intervalTime);\n    setSessionTime(sessionStartTime.toTimeString().slice(0, 5));\n    setDrivers(Array.from({\n      length: maxDrivers\n    }, () => ({\n      name: '',\n      carNumber: ''\n    })));\n    setError('');\n  };\n  useEffect(() => {\n    const handleReceiveSession = sessions => {\n      setSessions(sessions); // Update races with the received sessions\n    };\n    const handleSessionError = error => {\n      console.error(\"Session error:\", error);\n      setError(error.message); // Set the error message for display\n    };\n    socket.on(\"receive_session\", handleReceiveSession);\n    socket.on(\"session_error\", handleSessionError);\n    return () => {\n      socket.off(\"receive_session\", handleReceiveSession);\n      socket.off(\"session_error\", handleSessionError);\n    };\n  }, [setSessions, socket]);\n  function checkDriverAndCarUnique(value, index) {\n    if (value === \"\") {\n      return;\n    }\n    const isUnique = drivers.every((driver, i) => {\n      if (i === index) return true;\n      return driver['name'] !== value;\n    });\n    if (!isUnique) {\n      setError(`The driver name ${value} is already in use.`);\n    }\n    return isUnique;\n  }\n\n  // on changing the name field\n  const handleDriverChange = (index, value) => {\n    if (value === '') {\n      return;\n    }\n    const newDrivers = [...drivers];\n    newDrivers[index]['name'] = value;\n    newDrivers[index]['carNumber'] = index + 1;\n    setDrivers(newDrivers);\n    setError(''); // Clear error when user starts typing\n  };\n  function enableCreateRaceBtn() {\n    return drivers.some(driver => driver.name.trim() !== '');\n  }\n\n  //leaving the name field\n  const handleDriverBlur = (index, value) => {\n    if (!checkDriverAndCarUnique(value, index)) {\n      setError(`The driver name ${value} is already in use.`);\n    } else {\n      setError(''); // Clear error if unique\n    }\n  };\n  const getUpcomingSessions = () => {\n    const now = new Date();\n    return sessions.filter(session => {\n      const raceDate = new Date(session.startTime);\n      return raceDate > now;\n    }).sort((a, b) => new Date(a.startTime) - new Date(b.startTime)); // Sort by startTime\n  };\n\n  //TODO EDIT RACE\n  function editRace(session, index) {\n    // Set the current session data to state for editing\n    // setSessionDate(new Date(session.startTime).toISOString().split('T')[0]);\n    // setSessionTime(new Date(session.startTime).toTimeString().slice(0, 5));\n    // setDrivers(session.drivers.map(driver => ({name: driver.name, carNumber: driver.carNumber})));\n  }\n  function deleteRace(index) {\n    console.log(index);\n    socket.emit(\"delete_session\", index);\n  }\n  function raceTimeField() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"raceTime\",\n        children: \"Race Start Time: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        id: \"raceTime\",\n        value: sessionTime,\n        onChange: e => setSessionTime(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 16\n    }, this);\n  }\n  function driverFields() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [...Array(maxDrivers)].map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Driver Name\",\n          value: drivers[index].name || '',\n          onChange: e => handleDriverChange(index, e.target.value)\n          //after leaving field\n          ,\n          onBlur: e => handleDriverBlur(index, e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          readOnly: true,\n          type: \"text\",\n          placeholder: \"Car Number\",\n          value: drivers[index].carNumber || index + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this))\n    }, void 0, false);\n  }\n  function raceDateField() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"raceDate\",\n        children: \"Race Date: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"raceDate\",\n        value: sessionDate,\n        onChange: e => setSessionDate(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 16\n    }, this);\n  }\n  function manageRace() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create Race\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }, this), raceDateField(), raceTimeField(), driverFields(), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: createNewSession,\n        disabled: !enableCreateRaceBtn(),\n        className: \"btn createBtn\",\n        children: \"Create Race\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 16\n    }, this);\n  }\n  function upcomingRacesList() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Races List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: getUpcomingSessions().map((race, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Start Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 25\n          }, this), \" \", new Date(race.startTime).toLocaleString(), \" |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Drivers:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 25\n          }, this), \" \", race.drivers.map(driver => `${driver.name} (Car: ${driver.carNumber})`).join(', '), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => editRace(race, index),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => deleteRace(index),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 25\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Race Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 23\n    }, this), \" \", manageRace(), upcomingRacesList()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 9\n  }, this);\n}\n_s(FrontDesk, \"eSXqA5u/WnXn2dFodlYf8yD8T0Y=\", false, function () {\n  return [useSession];\n});\n_c = FrontDesk;\nexport default FrontDesk;\nvar _c;\n$RefreshReg$(_c, \"FrontDesk\");","map":{"version":3,"names":["useEffect","useState","useSession","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","FrontDesk","socket","_s","raceTime","process","env","NODE_ENV","maxDrivers","parseInt","REACT_APP_MAX_DRIVERS","intervalTime","REACT_APP_INTERVAL_ENV","console","log","currentTimePlusMin","Date","setMinutes","getMinutes","sessions","setSessions","drivers","setDrivers","Array","from","length","name","carNumber","sessionDate","setSessionDate","toISOString","split","sessionTime","setSessionTime","toTimeString","slice","error","setError","createNewSession","sessionStartTime","filledDrivers","filter","driver","trim","sessionData","startTime","map","emit","handleReceiveSession","handleSessionError","message","on","off","checkDriverAndCarUnique","value","index","isUnique","every","i","handleDriverChange","newDrivers","enableCreateRaceBtn","some","handleDriverBlur","getUpcomingSessions","now","session","raceDate","sort","a","b","editRace","deleteRace","raceTimeField","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","e","target","required","driverFields","_","placeholder","onBlur","readOnly","raceDateField","manageRace","onClick","disabled","className","upcomingRacesList","race","toLocaleString","join","_c","$RefreshReg$"],"sources":["/home/georg/kood/racetrack/src/front/components/FrontDesk.js"],"sourcesContent":["import {useEffect, useState} from 'react';\nimport {useSession} from \"../../back/SessionContext\";\nimport {Button} from \"react-bootstrap\";\n\nfunction FrontDesk({socket}) {\n    const raceTime = process.env.NODE_ENV === \"development\" ? 1 : 10\n    const maxDrivers = parseInt(process.env.REACT_APP_MAX_DRIVERS)\n    const intervalTime = parseInt(process.env.REACT_APP_INTERVAL_ENV)\n    console.log(`${maxDrivers} max drivers, ${raceTime} raceTime, ${intervalTime} intevaltime`)\n\n    const currentTimePlusMin = new Date()\n    currentTimePlusMin.setMinutes(currentTimePlusMin.getMinutes() + intervalTime)\n\n    const [sessions, setSessions] = useSession()\n    const [drivers, setDrivers] = useState(Array.from({length: maxDrivers}, () => ({name: '', carNumber: ''})))\n    const [sessionDate, setSessionDate] = useState(currentTimePlusMin.toISOString().split('T')[0])\n    const [sessionTime, setSessionTime] = useState(currentTimePlusMin.toTimeString().slice(0, 5))\n    const [error, setError] = useState('')\n\n    const createNewSession = () => {\n        const sessionStartTime = new Date(`${sessionDate}T${sessionTime}`)\n        const filledDrivers = drivers.filter(driver => driver.name.trim() !== '')\n\n        //create session with data\n        const sessionData = {\n            startTime: sessionStartTime.toISOString(),\n            drivers: filledDrivers.map(driver => ({\n                name: driver.name.trim(),\n                carNumber: driver.carNumber // Ensure carNumber is included\n            }))\n        }\n\n        //if session drivers empty stop\n        if (sessionData.drivers.length === 0) {\n            setError('At least one driver is required.');\n            return;\n        }\n\n        //send to server and clear up the data\n        socket.emit(\"add_session\", sessionData)\n        sessionStartTime.setMinutes(sessionStartTime.getMinutes() + raceTime + intervalTime)\n        setSessionTime(sessionStartTime.toTimeString().slice(0, 5))\n        setDrivers(Array.from({length: maxDrivers}, () => ({name: '', carNumber: ''})))\n        setError('')\n    }\n\n    useEffect(() => {\n        const handleReceiveSession = (sessions) => {\n            setSessions(sessions); // Update races with the received sessions\n        }\n        const handleSessionError = (error) => {\n            console.error(\"Session error:\", error)\n            setError(error.message); // Set the error message for display\n        }\n\n        socket.on(\"receive_session\", handleReceiveSession)\n        socket.on(\"session_error\", handleSessionError)\n\n        return () => {\n            socket.off(\"receive_session\", handleReceiveSession)\n            socket.off(\"session_error\", handleSessionError)\n        }\n    }, [setSessions, socket])\n\n    function checkDriverAndCarUnique(value, index) {\n        if (value === \"\") {\n            return\n        }\n        const isUnique = drivers.every((driver, i) => {\n            if (i === index) return true\n            return driver['name'] !== value\n        })\n        if (!isUnique) {\n            setError(`The driver name ${value} is already in use.`)\n        }\n        return isUnique;\n    }\n\n    // on changing the name field\n    const handleDriverChange = (index, value) => {\n        if (value === '') {\n            return\n        }\n        const newDrivers = [...drivers]\n        newDrivers[index]['name'] = value\n        newDrivers[index]['carNumber'] = index + 1\n\n        setDrivers(newDrivers)\n        setError('') // Clear error when user starts typing\n    };\n\n    function enableCreateRaceBtn() {\n        return drivers.some(driver => driver.name.trim() !== '')\n    }\n\n    //leaving the name field\n    const handleDriverBlur = (index, value) => {\n        if (!checkDriverAndCarUnique(value, index)) {\n            setError(`The driver name ${value} is already in use.`)\n        } else {\n            setError('') // Clear error if unique\n        }\n    };\n\n    const getUpcomingSessions = () => {\n        const now = new Date();\n        return sessions.filter(session => {\n            const raceDate = new Date(session.startTime);\n            return raceDate > now;\n        }).sort((a, b) => new Date(a.startTime) - new Date(b.startTime)); // Sort by startTime\n    };\n\n    //TODO EDIT RACE\n    function editRace(session, index) {\n        // Set the current session data to state for editing\n        // setSessionDate(new Date(session.startTime).toISOString().split('T')[0]);\n        // setSessionTime(new Date(session.startTime).toTimeString().slice(0, 5));\n        // setDrivers(session.drivers.map(driver => ({name: driver.name, carNumber: driver.carNumber})));\n    }\n\n    function deleteRace(index) {\n        console.log(index)\n        socket.emit(\"delete_session\", index)\n    }\n\n    function raceTimeField() {\n        return <div>\n            <label htmlFor=\"raceTime\">Race Start Time: </label>\n            <input\n                type=\"time\"\n                id=\"raceTime\"\n                value={sessionTime}\n                onChange={(e) => setSessionTime(e.target.value)}\n                required\n            />\n        </div>;\n    }\n\n    function driverFields() {\n        return <>\n            {[...Array(maxDrivers)].map((_, index) => (\n                <div key={index}>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Driver Name\"\n                        value={drivers[index].name || ''}\n                        onChange={(e) => handleDriverChange(index, e.target.value)}\n                        //after leaving field\n                        onBlur={(e) => handleDriverBlur(index, e.target.value)}\n                    />\n                    <input\n                        readOnly\n                        type=\"text\"\n                        placeholder=\"Car Number\"\n                        value={drivers[index].carNumber || index + 1}\n                    />\n                </div>\n            ))}\n        </>;\n    }\n\n    function raceDateField() {\n        return <div>\n            <label htmlFor=\"raceDate\">Race Date: </label>\n            <input\n                type=\"date\"\n                id=\"raceDate\"\n                value={sessionDate}\n                onChange={(e) => setSessionDate(e.target.value)}\n                required\n            />\n        </div>;\n    }\n\n    function manageRace() {\n        return <div>\n            <h2>Create Race</h2>\n            {raceDateField()}\n            {raceTimeField()}\n            {driverFields()}\n            <br/>\n            <Button onClick={createNewSession} disabled={!enableCreateRaceBtn()} className=\"btn createBtn\">Create Race\n            </Button>\n        </div>;\n    }\n\n    function upcomingRacesList() {\n        return <div>\n            <h2>Races List</h2>\n            <ul>\n                {getUpcomingSessions().map((race, index) => (\n                    <li key={index}>\n                        <strong>Start Time:</strong> {new Date(race.startTime).toLocaleString()} |\n                        <strong>Drivers:</strong> {race.drivers.map(driver => `${driver.name} (Car: ${driver.carNumber})`).join(', ')}\n                        <button onClick={() => editRace(race, index)}>Edit</button>\n                        <button onClick={() => deleteRace(index)}>Delete</button>\n                    </li>\n                ))}\n            </ul>\n        </div>;\n    }\n\n    return (\n        <div>\n            <h1>Race Management</h1>\n            {error && <div className=\"error\">{error}</div>} {/* Display error messages */}\n            {manageRace()}\n\n            {upcomingRacesList()}\n        </div>\n    );\n}\n\nexport default FrontDesk;"],"mappings":";;AAAA,SAAQA,SAAS,EAAEC,QAAQ,QAAO,OAAO;AACzC,SAAQC,UAAU,QAAO,2BAA2B;AACpD,SAAQC,MAAM,QAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvC,SAASC,SAASA,CAAC;EAACC;AAAM,CAAC,EAAE;EAAAC,EAAA;EACzB,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,GAAG,CAAC,GAAG,EAAE;EAChE,MAAMC,UAAU,GAAGC,QAAQ,CAACJ,OAAO,CAACC,GAAG,CAACI,qBAAqB,CAAC;EAC9D,MAAMC,YAAY,GAAGF,QAAQ,CAACJ,OAAO,CAACC,GAAG,CAACM,sBAAsB,CAAC;EACjEC,OAAO,CAACC,GAAG,CAAC,GAAGN,UAAU,iBAAiBJ,QAAQ,cAAcO,YAAY,cAAc,CAAC;EAE3F,MAAMI,kBAAkB,GAAG,IAAIC,IAAI,CAAC,CAAC;EACrCD,kBAAkB,CAACE,UAAU,CAACF,kBAAkB,CAACG,UAAU,CAAC,CAAC,GAAGP,YAAY,CAAC;EAE7E,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,UAAU,CAAC,CAAC;EAC5C,MAAM,CAAC0B,OAAO,EAAEC,UAAU,CAAC,GAAG5B,QAAQ,CAAC6B,KAAK,CAACC,IAAI,CAAC;IAACC,MAAM,EAAEjB;EAAU,CAAC,EAAE,OAAO;IAACkB,IAAI,EAAE,EAAE;IAAEC,SAAS,EAAE;EAAE,CAAC,CAAC,CAAC,CAAC;EAC3G,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGnC,QAAQ,CAACqB,kBAAkB,CAACe,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9F,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGvC,QAAQ,CAACqB,kBAAkB,CAACmB,YAAY,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC7F,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAG3C,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAM4C,gBAAgB,GAAGA,CAAA,KAAM;IAC3B,MAAMC,gBAAgB,GAAG,IAAIvB,IAAI,CAAC,GAAGY,WAAW,IAAII,WAAW,EAAE,CAAC;IAClE,MAAMQ,aAAa,GAAGnB,OAAO,CAACoB,MAAM,CAACC,MAAM,IAAIA,MAAM,CAAChB,IAAI,CAACiB,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;;IAEzE;IACA,MAAMC,WAAW,GAAG;MAChBC,SAAS,EAAEN,gBAAgB,CAACT,WAAW,CAAC,CAAC;MACzCT,OAAO,EAAEmB,aAAa,CAACM,GAAG,CAACJ,MAAM,KAAK;QAClChB,IAAI,EAAEgB,MAAM,CAAChB,IAAI,CAACiB,IAAI,CAAC,CAAC;QACxBhB,SAAS,EAAEe,MAAM,CAACf,SAAS,CAAC;MAChC,CAAC,CAAC;IACN,CAAC;;IAED;IACA,IAAIiB,WAAW,CAACvB,OAAO,CAACI,MAAM,KAAK,CAAC,EAAE;MAClCY,QAAQ,CAAC,kCAAkC,CAAC;MAC5C;IACJ;;IAEA;IACAnC,MAAM,CAAC6C,IAAI,CAAC,aAAa,EAAEH,WAAW,CAAC;IACvCL,gBAAgB,CAACtB,UAAU,CAACsB,gBAAgB,CAACrB,UAAU,CAAC,CAAC,GAAGd,QAAQ,GAAGO,YAAY,CAAC;IACpFsB,cAAc,CAACM,gBAAgB,CAACL,YAAY,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3Db,UAAU,CAACC,KAAK,CAACC,IAAI,CAAC;MAACC,MAAM,EAAEjB;IAAU,CAAC,EAAE,OAAO;MAACkB,IAAI,EAAE,EAAE;MAAEC,SAAS,EAAE;IAAE,CAAC,CAAC,CAAC,CAAC;IAC/EU,QAAQ,CAAC,EAAE,CAAC;EAChB,CAAC;EAED5C,SAAS,CAAC,MAAM;IACZ,MAAMuD,oBAAoB,GAAI7B,QAAQ,IAAK;MACvCC,WAAW,CAACD,QAAQ,CAAC,CAAC,CAAC;IAC3B,CAAC;IACD,MAAM8B,kBAAkB,GAAIb,KAAK,IAAK;MAClCvB,OAAO,CAACuB,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtCC,QAAQ,CAACD,KAAK,CAACc,OAAO,CAAC,CAAC,CAAC;IAC7B,CAAC;IAEDhD,MAAM,CAACiD,EAAE,CAAC,iBAAiB,EAAEH,oBAAoB,CAAC;IAClD9C,MAAM,CAACiD,EAAE,CAAC,eAAe,EAAEF,kBAAkB,CAAC;IAE9C,OAAO,MAAM;MACT/C,MAAM,CAACkD,GAAG,CAAC,iBAAiB,EAAEJ,oBAAoB,CAAC;MACnD9C,MAAM,CAACkD,GAAG,CAAC,eAAe,EAAEH,kBAAkB,CAAC;IACnD,CAAC;EACL,CAAC,EAAE,CAAC7B,WAAW,EAAElB,MAAM,CAAC,CAAC;EAEzB,SAASmD,uBAAuBA,CAACC,KAAK,EAAEC,KAAK,EAAE;IAC3C,IAAID,KAAK,KAAK,EAAE,EAAE;MACd;IACJ;IACA,MAAME,QAAQ,GAAGnC,OAAO,CAACoC,KAAK,CAAC,CAACf,MAAM,EAAEgB,CAAC,KAAK;MAC1C,IAAIA,CAAC,KAAKH,KAAK,EAAE,OAAO,IAAI;MAC5B,OAAOb,MAAM,CAAC,MAAM,CAAC,KAAKY,KAAK;IACnC,CAAC,CAAC;IACF,IAAI,CAACE,QAAQ,EAAE;MACXnB,QAAQ,CAAC,mBAAmBiB,KAAK,qBAAqB,CAAC;IAC3D;IACA,OAAOE,QAAQ;EACnB;;EAEA;EACA,MAAMG,kBAAkB,GAAGA,CAACJ,KAAK,EAAED,KAAK,KAAK;IACzC,IAAIA,KAAK,KAAK,EAAE,EAAE;MACd;IACJ;IACA,MAAMM,UAAU,GAAG,CAAC,GAAGvC,OAAO,CAAC;IAC/BuC,UAAU,CAACL,KAAK,CAAC,CAAC,MAAM,CAAC,GAAGD,KAAK;IACjCM,UAAU,CAACL,KAAK,CAAC,CAAC,WAAW,CAAC,GAAGA,KAAK,GAAG,CAAC;IAE1CjC,UAAU,CAACsC,UAAU,CAAC;IACtBvB,QAAQ,CAAC,EAAE,CAAC,EAAC;EACjB,CAAC;EAED,SAASwB,mBAAmBA,CAAA,EAAG;IAC3B,OAAOxC,OAAO,CAACyC,IAAI,CAACpB,MAAM,IAAIA,MAAM,CAAChB,IAAI,CAACiB,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;EAC5D;;EAEA;EACA,MAAMoB,gBAAgB,GAAGA,CAACR,KAAK,EAAED,KAAK,KAAK;IACvC,IAAI,CAACD,uBAAuB,CAACC,KAAK,EAAEC,KAAK,CAAC,EAAE;MACxClB,QAAQ,CAAC,mBAAmBiB,KAAK,qBAAqB,CAAC;IAC3D,CAAC,MAAM;MACHjB,QAAQ,CAAC,EAAE,CAAC,EAAC;IACjB;EACJ,CAAC;EAED,MAAM2B,mBAAmB,GAAGA,CAAA,KAAM;IAC9B,MAAMC,GAAG,GAAG,IAAIjD,IAAI,CAAC,CAAC;IACtB,OAAOG,QAAQ,CAACsB,MAAM,CAACyB,OAAO,IAAI;MAC9B,MAAMC,QAAQ,GAAG,IAAInD,IAAI,CAACkD,OAAO,CAACrB,SAAS,CAAC;MAC5C,OAAOsB,QAAQ,GAAGF,GAAG;IACzB,CAAC,CAAC,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAItD,IAAI,CAACqD,CAAC,CAACxB,SAAS,CAAC,GAAG,IAAI7B,IAAI,CAACsD,CAAC,CAACzB,SAAS,CAAC,CAAC,CAAC,CAAC;EACtE,CAAC;;EAED;EACA,SAAS0B,QAAQA,CAACL,OAAO,EAAEX,KAAK,EAAE;IAC9B;IACA;IACA;IACA;EAAA;EAGJ,SAASiB,UAAUA,CAACjB,KAAK,EAAE;IACvB1C,OAAO,CAACC,GAAG,CAACyC,KAAK,CAAC;IAClBrD,MAAM,CAAC6C,IAAI,CAAC,gBAAgB,EAAEQ,KAAK,CAAC;EACxC;EAEA,SAASkB,aAAaA,CAAA,EAAG;IACrB,oBAAO3E,OAAA;MAAA4E,QAAA,gBACH5E,OAAA;QAAO6E,OAAO,EAAC,UAAU;QAAAD,QAAA,EAAC;MAAiB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACnDjF,OAAA;QACIkF,IAAI,EAAC,MAAM;QACXC,EAAE,EAAC,UAAU;QACb3B,KAAK,EAAEtB,WAAY;QACnBkD,QAAQ,EAAGC,CAAC,IAAKlD,cAAc,CAACkD,CAAC,CAACC,MAAM,CAAC9B,KAAK,CAAE;QAChD+B,QAAQ;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EACV;EAEA,SAASO,YAAYA,CAAA,EAAG;IACpB,oBAAOxF,OAAA,CAAAE,SAAA;MAAA0E,QAAA,EACF,CAAC,GAAGnD,KAAK,CAACf,UAAU,CAAC,CAAC,CAACsC,GAAG,CAAC,CAACyC,CAAC,EAAEhC,KAAK,kBACjCzD,OAAA;QAAA4E,QAAA,gBACI5E,OAAA;UACIkF,IAAI,EAAC,MAAM;UACXQ,WAAW,EAAC,aAAa;UACzBlC,KAAK,EAAEjC,OAAO,CAACkC,KAAK,CAAC,CAAC7B,IAAI,IAAI,EAAG;UACjCwD,QAAQ,EAAGC,CAAC,IAAKxB,kBAAkB,CAACJ,KAAK,EAAE4B,CAAC,CAACC,MAAM,CAAC9B,KAAK;UACzD;UAAA;UACAmC,MAAM,EAAGN,CAAC,IAAKpB,gBAAgB,CAACR,KAAK,EAAE4B,CAAC,CAACC,MAAM,CAAC9B,KAAK;QAAE;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1D,CAAC,eACFjF,OAAA;UACI4F,QAAQ;UACRV,IAAI,EAAC,MAAM;UACXQ,WAAW,EAAC,YAAY;UACxBlC,KAAK,EAAEjC,OAAO,CAACkC,KAAK,CAAC,CAAC5B,SAAS,IAAI4B,KAAK,GAAG;QAAE;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChD,CAAC;MAAA,GAdIxB,KAAK;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAeV,CACR;IAAC,gBACJ,CAAC;EACP;EAEA,SAASY,aAAaA,CAAA,EAAG;IACrB,oBAAO7F,OAAA;MAAA4E,QAAA,gBACH5E,OAAA;QAAO6E,OAAO,EAAC,UAAU;QAAAD,QAAA,EAAC;MAAW;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC7CjF,OAAA;QACIkF,IAAI,EAAC,MAAM;QACXC,EAAE,EAAC,UAAU;QACb3B,KAAK,EAAE1B,WAAY;QACnBsD,QAAQ,EAAGC,CAAC,IAAKtD,cAAc,CAACsD,CAAC,CAACC,MAAM,CAAC9B,KAAK,CAAE;QAChD+B,QAAQ;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EACV;EAEA,SAASa,UAAUA,CAAA,EAAG;IAClB,oBAAO9F,OAAA;MAAA4E,QAAA,gBACH5E,OAAA;QAAA4E,QAAA,EAAI;MAAW;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACnBY,aAAa,CAAC,CAAC,EACflB,aAAa,CAAC,CAAC,EACfa,YAAY,CAAC,CAAC,eACfxF,OAAA;QAAA8E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACLjF,OAAA,CAACF,MAAM;QAACiG,OAAO,EAAEvD,gBAAiB;QAACwD,QAAQ,EAAE,CAACjC,mBAAmB,CAAC,CAAE;QAACkC,SAAS,EAAC,eAAe;QAAArB,QAAA,EAAC;MAC/F;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EACV;EAEA,SAASiB,iBAAiBA,CAAA,EAAG;IACzB,oBAAOlG,OAAA;MAAA4E,QAAA,gBACH5E,OAAA;QAAA4E,QAAA,EAAI;MAAU;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnBjF,OAAA;QAAA4E,QAAA,EACKV,mBAAmB,CAAC,CAAC,CAAClB,GAAG,CAAC,CAACmD,IAAI,EAAE1C,KAAK,kBACnCzD,OAAA;UAAA4E,QAAA,gBACI5E,OAAA;YAAA4E,QAAA,EAAQ;UAAW;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAAC,IAAI/D,IAAI,CAACiF,IAAI,CAACpD,SAAS,CAAC,CAACqD,cAAc,CAAC,CAAC,EAAC,IACxE,eAAApG,OAAA;YAAA4E,QAAA,EAAQ;UAAQ;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACkB,IAAI,CAAC5E,OAAO,CAACyB,GAAG,CAACJ,MAAM,IAAI,GAAGA,MAAM,CAAChB,IAAI,UAAUgB,MAAM,CAACf,SAAS,GAAG,CAAC,CAACwE,IAAI,CAAC,IAAI,CAAC,eAC7GrG,OAAA;YAAQ+F,OAAO,EAAEA,CAAA,KAAMtB,QAAQ,CAAC0B,IAAI,EAAE1C,KAAK,CAAE;YAAAmB,QAAA,EAAC;UAAI;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC3DjF,OAAA;YAAQ+F,OAAO,EAAEA,CAAA,KAAMrB,UAAU,CAACjB,KAAK,CAAE;YAAAmB,QAAA,EAAC;UAAM;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,GAJpDxB,KAAK;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKV,CACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EACV;EAEA,oBACIjF,OAAA;IAAA4E,QAAA,gBACI5E,OAAA;MAAA4E,QAAA,EAAI;IAAe;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACvB3C,KAAK,iBAAItC,OAAA;MAAKiG,SAAS,EAAC,OAAO;MAAArB,QAAA,EAAEtC;IAAK;MAAAwC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAAC,GAAC,EAC/Ca,UAAU,CAAC,CAAC,EAEZI,iBAAiB,CAAC,CAAC;EAAA;IAAApB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnB,CAAC;AAEd;AAAC5E,EAAA,CA/MQF,SAAS;EAAA,QASkBN,UAAU;AAAA;AAAAyG,EAAA,GATrCnG,SAAS;AAiNlB,eAAeA,SAAS;AAAC,IAAAmG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}