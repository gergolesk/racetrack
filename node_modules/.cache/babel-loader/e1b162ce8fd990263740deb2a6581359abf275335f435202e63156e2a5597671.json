{"ast":null,"code":"var _jsxFileName = \"/home/georg/kood/racetrack/src/front/pages/FrontDeskPage.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useSession } from \"./components/SessionContext\";\nimport Button from \"./components/Button/Button\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction FrontDeskPage({\n  socket\n}) {\n  _s();\n  const raceTime = process.env.NODE_ENV === \"development\" ? 1 : 10;\n  const maxDrivers = parseInt(process.env.REACT_APP_MAX_DRIVERS, 10) || 8;\n  const intervalTime = parseInt(process.env.REACT_APP_INTERVAL_ENV, 10) || 5;\n  const currentTimePlusMin = new Date();\n  currentTimePlusMin.setMinutes(currentTimePlusMin.getMinutes() + intervalTime);\n  const [sessions, setSessions] = useSession();\n  const [drivers, setDrivers] = useState(Array.from({\n    length: maxDrivers\n  }, () => ({\n    name: '',\n    carNumber: ''\n  })));\n  //TODO Change input date to localdate\n  const [sessionDate, setSessionDate] = useState(currentTimePlusMin.toISOString().split('T')[0]);\n  const [sessionTime, setSessionTime] = useState(currentTimePlusMin.toTimeString().slice(0, 5));\n  const [editingSession, setEditingSession] = useState(null);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    socket.emit(\"get_all_sessions\");\n  }, []);\n  useEffect(() => {\n    const handleReceiveSession = sessions => {\n      if (sessions && sessions.length > 0) {\n        setSessions(sessions);\n      } else {\n        console.error(\"Received sessions data is not an array:\", sessions);\n      }\n    };\n    const handleSessionError = error => {\n      setError(error.message); // Set the error message for display\n    };\n    socket.on(\"receive_session\", handleReceiveSession);\n    socket.on(\"session_error\", handleSessionError);\n    return () => {\n      socket.off(\"receive_session\", handleReceiveSession);\n      socket.off(\"session_error\", handleSessionError);\n    };\n  }, [setSessions, socket]);\n  const createOrUpdateSession = () => {\n    const sessionStartTime = new Date(`${sessionDate}T${sessionTime}`);\n    if (sessionStartTime < new Date()) {\n      setError(\"The start time cannot be in the past\");\n      return;\n    }\n    const filledDrivers = drivers.filter(driver => driver.name.trim() !== '');\n\n    //create session with data\n    const sessionData = {\n      startTime: sessionStartTime.toISOString(),\n      hasStarted: false,\n      hasFinished: false,\n      drivers: filledDrivers.map(driver => ({\n        name: driver.name.trim(),\n        carNumber: driver.carNumber,\n        // Ensure carNumber is included\n        laps: 0,\n        fastestLap: 0\n      }))\n    };\n\n    //if session drivers empty stop\n    if (sessionData.drivers.length === 0) {\n      setError('At least one driver is required.');\n      return;\n    }\n    if (editingSession !== null) {\n      socket.emit(\"update_session\", {\n        id: editingSession,\n        sessionData\n      });\n      setEditingSession(null);\n    } else {\n      console.log(\"add session\");\n      socket.emit(\"add_session\", sessionData);\n    }\n    sessionStartTime.setMinutes(sessionStartTime.getMinutes() + raceTime + intervalTime);\n    setSessionTime(sessionStartTime.toTimeString().slice(0, 5));\n    setDrivers(Array.from({\n      length: maxDrivers\n    }, () => ({\n      name: '',\n      carNumber: ''\n    })));\n    setError('');\n  };\n  const checkDriverAndCarUnique = (value, index) => {\n    if (value === \"\") {\n      return;\n    }\n    const isUnique = drivers.every((driver, i) => {\n      if (i === index) return true;\n      return driver['name'] !== value;\n    });\n    if (!isUnique) {\n      setError(`The driver name ${value} is already in use.`);\n    }\n    return isUnique;\n  };\n\n  // on changing the name field\n  const handleDriverChange = (index, value) => {\n    const newDrivers = [...drivers];\n    newDrivers[index]['name'] = value;\n    newDrivers[index]['carNumber'] = index + 1;\n    setDrivers(newDrivers);\n    setError(''); // Clear error when user starts typing\n  };\n  function enableCreateRaceBtn() {\n    return drivers.some(driver => driver.name.trim() !== '');\n  }\n\n  // leaving the name field\n  const handleDriverBlur = (index, value) => {\n    if (!checkDriverAndCarUnique(value, index)) {\n      setError(`The driver name ${value} is already in use.`);\n    } else {\n      setError(''); // Clear error if unique\n    }\n  };\n  const getUpcomingSessions = () => {\n    if (!sessions) return;\n    return sessions.filter(session => !session.hasStarted).sort((a, b) => new Date(a.startTime) - new Date(b.startTime)); // Sort by startTime\n  };\n  function editRace(session) {\n    const raceDate = new Date(session.startTime);\n    // Set the current session data to state for editing\n    setSessionDate(raceDate.toISOString().split('T')[0]);\n    setSessionTime(raceDate.toTimeString().slice(0, 5));\n    const newDrivers = Array.from({\n      length: maxDrivers\n    }, (_, index) => ({\n      name: '',\n      carNumber: index + 1\n    }));\n    newDrivers.forEach(driver => {\n      const foundDriver = session.drivers.find(d => d.carNumber === driver.carNumber);\n      if (foundDriver) {\n        driver.name = foundDriver.name;\n      }\n    });\n    setDrivers(newDrivers);\n    setError('');\n    setEditingSession(session.id);\n  }\n  function deleteRace(id) {\n    console.log(id);\n    socket.emit(\"delete_session\", id);\n  }\n  function raceTimeField() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"raceTime\",\n        children: \"Race Start Time: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        id: \"raceTime\",\n        value: sessionTime,\n        onChange: e => setSessionTime(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 16\n    }, this);\n  }\n  function driverFields() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [...Array(maxDrivers)].map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Driver Name\",\n          value: drivers[index].name || '',\n          onChange: e => handleDriverChange(index, e.target.value)\n          //after leaving field\n          ,\n          onBlur: e => handleDriverBlur(index, e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          readOnly: true,\n          type: \"text\",\n          placeholder: \"Car Number\",\n          value: drivers[index].carNumber || index + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this))\n    }, void 0, false);\n  }\n  function raceDateField() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"raceDate\",\n        children: \"Race Date: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"raceDate\",\n        value: sessionDate,\n        onChange: e => setSessionDate(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 16\n    }, this);\n  }\n  function manageRace() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create Race\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }, this), raceDateField(), raceTimeField(), driverFields(), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: createOrUpdateSession,\n        disabled: !enableCreateRaceBtn(),\n        className: \"btn createBtn\",\n        children: editingSession !== null ? \"Update Race\" : \"Create Race\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 16\n    }, this);\n  }\n  function upcomingRacesList() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Races List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: getUpcomingSessions() && getUpcomingSessions().map(race => /*#__PURE__*/_jsxDEV(\"li\", {\n          id: race.id,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Start Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 25\n          }, this), \" \", new Date(race.startTime).toLocaleString(), \" |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Drivers:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 25\n          }, this), \" \", race.drivers.map(driver => `${driver.name} (Car: ${driver.carNumber})`).join(', '), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => editRace(race),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => deleteRace(race.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Race Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 23\n    }, this), \" \", manageRace(), upcomingRacesList()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 9\n  }, this);\n}\n_s(FrontDeskPage, \"fJjX6sfxsiGOPsLOLSdDqtTqQCE=\", false, function () {\n  return [useSession];\n});\n_c = FrontDeskPage;\nexport default FrontDeskPage;\nvar _c;\n$RefreshReg$(_c, \"FrontDeskPage\");","map":{"version":3,"names":["useEffect","useState","useSession","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","FrontDeskPage","socket","_s","raceTime","process","env","NODE_ENV","maxDrivers","parseInt","REACT_APP_MAX_DRIVERS","intervalTime","REACT_APP_INTERVAL_ENV","currentTimePlusMin","Date","setMinutes","getMinutes","sessions","setSessions","drivers","setDrivers","Array","from","length","name","carNumber","sessionDate","setSessionDate","toISOString","split","sessionTime","setSessionTime","toTimeString","slice","editingSession","setEditingSession","error","setError","emit","handleReceiveSession","console","handleSessionError","message","on","off","createOrUpdateSession","sessionStartTime","filledDrivers","filter","driver","trim","sessionData","startTime","hasStarted","hasFinished","map","laps","fastestLap","id","log","checkDriverAndCarUnique","value","index","isUnique","every","i","handleDriverChange","newDrivers","enableCreateRaceBtn","some","handleDriverBlur","getUpcomingSessions","session","sort","a","b","editRace","raceDate","_","forEach","foundDriver","find","d","deleteRace","raceTimeField","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","required","driverFields","placeholder","onBlur","readOnly","raceDateField","manageRace","onClick","disabled","className","upcomingRacesList","race","toLocaleString","join","_c","$RefreshReg$"],"sources":["/home/georg/kood/racetrack/src/front/pages/FrontDeskPage.js"],"sourcesContent":["import {useEffect, useState} from 'react';\nimport {useSession} from \"./components/SessionContext\";\nimport Button from \"./components/Button/Button\";\n\nfunction FrontDeskPage({socket}) {\n\n    const raceTime = process.env.NODE_ENV === \"development\" ? 1 : 10\n    const maxDrivers = parseInt(process.env.REACT_APP_MAX_DRIVERS, 10) || 8\n    const intervalTime = parseInt(process.env.REACT_APP_INTERVAL_ENV, 10) || 5\n\n    const currentTimePlusMin = new Date()\n    currentTimePlusMin.setMinutes(currentTimePlusMin.getMinutes() + intervalTime)\n\n    const [sessions, setSessions] = useSession()\n    const [drivers, setDrivers] = useState(\n        Array.from({length: maxDrivers},\n            () => ({name: '', carNumber: ''})))\n    //TODO Change input date to localdate\n    const [sessionDate, setSessionDate] = useState(currentTimePlusMin.toISOString().split('T')[0])\n    const [sessionTime, setSessionTime] = useState(currentTimePlusMin.toTimeString().slice(0, 5))\n    const [editingSession, setEditingSession] = useState(null)\n    const [error, setError] = useState('')\n    useEffect(() => {\n        socket.emit(\"get_all_sessions\")\n    }, [])\n    useEffect(() => {\n        const handleReceiveSession = (sessions) => {\n            if (sessions && sessions.length > 0) {\n                setSessions(sessions);\n            } else {\n                console.error(\"Received sessions data is not an array:\", sessions);\n            }\n        }\n        const handleSessionError = (error) => {\n            setError(error.message); // Set the error message for display\n        }\n\n        socket.on(\"receive_session\", handleReceiveSession)\n        socket.on(\"session_error\", handleSessionError)\n\n        return () => {\n            socket.off(\"receive_session\", handleReceiveSession)\n            socket.off(\"session_error\", handleSessionError)\n        }\n    }, [setSessions, socket])\n\n    const createOrUpdateSession = () => {\n        const sessionStartTime = new Date(`${sessionDate}T${sessionTime}`)\n        if (sessionStartTime < new Date()) {\n            setError(\"The start time cannot be in the past\")\n            return;\n        }\n        const filledDrivers = drivers.filter(driver => driver.name.trim() !== '')\n\n        //create session with data\n        const sessionData = {\n            startTime: sessionStartTime.toISOString(),\n            hasStarted: false,\n            hasFinished: false,\n            drivers: filledDrivers.map(driver => ({\n                name: driver.name.trim(),\n                carNumber: driver.carNumber, // Ensure carNumber is included\n                laps: 0,\n                fastestLap: 0\n            }))\n        }\n\n        //if session drivers empty stop\n        if (sessionData.drivers.length === 0) {\n            setError('At least one driver is required.');\n            return;\n        }\n\n        if (editingSession !== null) {\n            socket.emit(\"update_session\", {id: editingSession, sessionData});\n            setEditingSession(null)\n        } else {\n            console.log(\"add session\")\n            socket.emit(\"add_session\", sessionData)\n        }\n\n        sessionStartTime.setMinutes(sessionStartTime.getMinutes() + raceTime + intervalTime)\n        setSessionTime(sessionStartTime.toTimeString().slice(0, 5))\n        setDrivers(Array.from({length: maxDrivers}, () => ({name: '', carNumber: ''})))\n        setError('')\n    }\n\n    const checkDriverAndCarUnique = (value, index) => {\n        if (value === \"\") {\n            return\n        }\n        const isUnique = drivers.every((driver, i) => {\n            if (i === index) return true\n            return driver['name'] !== value\n        })\n        if (!isUnique) {\n            setError(`The driver name ${value} is already in use.`)\n        }\n        return isUnique;\n    }\n\n    // on changing the name field\n    const handleDriverChange = (index, value) => {\n        const newDrivers = [...drivers]\n        newDrivers[index]['name'] = value\n        newDrivers[index]['carNumber'] = index + 1\n\n        setDrivers(newDrivers)\n        setError('') // Clear error when user starts typing\n    };\n\n    function enableCreateRaceBtn() {\n        return drivers.some(driver => driver.name.trim() !== '')\n    }\n\n    // leaving the name field\n    const handleDriverBlur = (index, value) => {\n        if (!checkDriverAndCarUnique(value, index)) {\n            setError(`The driver name ${value} is already in use.`)\n        } else {\n            setError('') // Clear error if unique\n        }\n    };\n\n    const getUpcomingSessions = () => {\n        if (!sessions) return\n\n        return sessions\n            .filter(session => !session.hasStarted)\n            .sort((a, b) => new Date(a.startTime) - new Date(b.startTime)); // Sort by startTime\n    };\n\n    function editRace(session) {\n        const raceDate = new Date(session.startTime)\n        // Set the current session data to state for editing\n        setSessionDate(raceDate.toISOString().split('T')[0]);\n        setSessionTime(raceDate.toTimeString().slice(0, 5));\n\n        const newDrivers = Array.from({length: maxDrivers},\n            (_, index) => ({name: '', carNumber: index + 1}))\n\n        newDrivers.forEach((driver) => {\n            const foundDriver = session.drivers.find(d => d.carNumber === driver.carNumber)\n            if (foundDriver) {\n                driver.name = foundDriver.name\n            }\n        })\n        setDrivers(newDrivers)\n        setError('')\n        setEditingSession(session.id)\n    }\n\n    function deleteRace(id) {\n        console.log(id)\n        socket.emit(\"delete_session\", id)\n    }\n\n    function raceTimeField() {\n        return <div>\n            <label htmlFor=\"raceTime\">Race Start Time: </label>\n            <input\n                type=\"time\"\n                id=\"raceTime\"\n                value={sessionTime}\n                onChange={(e) => setSessionTime(e.target.value)}\n                required\n            />\n        </div>;\n    }\n\n    function driverFields() {\n        return <>\n            {[...Array(maxDrivers)].map((_, index) => (\n                <div key={index}>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Driver Name\"\n                        value={drivers[index].name || ''}\n                        onChange={(e) => handleDriverChange(index, e.target.value)}\n                        //after leaving field\n                        onBlur={(e) => handleDriverBlur(index, e.target.value)}\n                    />\n                    <input\n                        readOnly\n                        type=\"text\"\n                        placeholder=\"Car Number\"\n                        value={drivers[index].carNumber || index + 1}\n                    />\n                </div>\n            ))}\n        </>;\n    }\n\n    function raceDateField() {\n        return <div>\n            <label htmlFor=\"raceDate\">Race Date: </label>\n            <input\n                type=\"date\"\n                id=\"raceDate\"\n                value={sessionDate}\n                onChange={(e) => setSessionDate(e.target.value)}\n                required\n            />\n        </div>;\n    }\n\n    function manageRace() {\n        return <div>\n            <h2>Create Race</h2>\n            {raceDateField()}\n            {raceTimeField()}\n            {driverFields()}\n            <br/>\n            <Button onClick={createOrUpdateSession} disabled={!enableCreateRaceBtn()} className=\"btn createBtn\">\n                {editingSession !== null ? \"Update Race\" : \"Create Race\"}\n            </Button>\n        </div>;\n    }\n\n    function upcomingRacesList() {\n        return <div>\n            <h2>Races List</h2>\n            <ul>\n                {getUpcomingSessions() && getUpcomingSessions().map((race) => (\n                    <li id={race.id}>\n                        <strong>Start Time:</strong> {new Date(race.startTime).toLocaleString()} |\n                        <strong>Drivers:</strong> {race.drivers.map(driver => `${driver.name} (Car: ${driver.carNumber})`).join(', ')}\n                        <Button onClick={() => editRace(race)}>Edit</Button>\n                        <Button onClick={() => deleteRace(race.id)}>Delete</Button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    }\n\n    return (\n        <div>\n            <h1>Race Management</h1>\n            {/*TODO: Make error red*/}\n            {error && <div className=\"error\">{error}</div>} {/* Display error messages */}\n            {manageRace()}\n            {upcomingRacesList()}\n        </div>\n    );\n}\n\nexport default FrontDeskPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}